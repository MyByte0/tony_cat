cmake_minimum_required(VERSION 3.7)

project(tony_cat CXX)


ADD_DEFINITIONS("-DASIO_STANDALONE")
ADD_DEFINITIONS("-DGLOG_NO_ABBREVIATED_SEVERITIES")
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

FIND_PACKAGE(Threads REQUIRED)

SET(CMAKE_CXX_STANDARD 20)

ADD_DEFINITIONS("-DPROJ_CXX_STANDARD=${CMAKE_CXX_STANDARD}")

if(MSVC)
       # example: CMAKE_TOOLCHAIN_FILE=D:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake)
	   INCLUDE(${CMAKE_TOOLCHAIN_FILE})
	   ADD_DEFINITIONS("-D_WIN32_WINNT=0x0601")
	   add_compile_options(/wd4251)
	   add_compile_options(/wd4996)
endif()

if(CMAKE_COMPILER_IS_GNUCXX)
	SET(CMAKE_CXX_FLAGS "-fcoroutines ${CMAKE_CXX_FLAGS}")
	SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -g")
	SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -Os")
endif()

if(CMAKE_COMPILER_IS_GNUCXX)
	FIND_PACKAGE(fmt)
	SET(LIB_DEPEND
		${LIB_DEPEND}
		fmt::fmt
	   )
endif()

FIND_PACKAGE(glog REQUIRED)
FIND_PACKAGE(tinyxml2 REQUIRED)

SET(LIB_DEPEND
	${LIB_DEPEND}
	glog::glog
	tinyxml2::tinyxml2
)

if(CMAKE_COMPILER_IS_GNUCXX)
	FIND_PACKAGE(Protobuf REQUIRED)
	SET(LIB_DEPEND
	${LIB_DEPEND}
	${Protobuf_LIBRARIES}
	)
endif()

if(MSVC)
    FIND_PACKAGE(Protobuf CONFIG REQUIRED)
	FIND_PACKAGE(fmt)
	SET(LIB_DEPEND
		${LIB_DEPEND}
		fmt::fmt
		protobuf::libprotoc protobuf::libprotobuf protobuf::libprotobuf-lite
	)
endif()

if(CMAKE_COMPILER_IS_GNUCXX)
	EXECUTE_PROCESS(WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/protocol
					COMMAND sh pb_gen_code.sh
					)
elseif(MSVC)
	EXECUTE_PROCESS(WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/protocol
					COMMAND ${Protobuf_PROTOC_EXECUTABLE} *.proto --cpp_out=.
					)
endif()

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/build)

FILE(GLOB_RECURSE COMMON_FILES ./common/*.h ./common/*.cc ./common/*.hpp ./common/*.cpp)
FILE(GLOB_RECURSE PROTOBUF_FILES ./protocol/*.h ./protocol/*.cc )

ADD_LIBRARY(TONY_CAT
	${COMMON_FILES}
)

ADD_LIBRARY(PROTO
	${PROTOBUF_FILES}
)

ADD_SUBDIRECTORY(
	example
)
